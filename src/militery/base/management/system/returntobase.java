/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package militery.base.management.system;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.result.UpdateResult;
import javax.swing.JOptionPane;
import org.bson.Document;
import org.bson.conversions.Bson;

/**
 *
 * @author M S I
 */
public class returntobase extends javax.swing.JFrame {
    int soldire;
    int tanks;
    int vehicles;
    int weapons;
        String soldires;
        String tankss;
        String vehicless;
        String weaponss;
     MongoClient mongo;
     MongoDatabase db;
     MongoCollection<org.bson.Document> collection;
      MongoClient mongo1;
     MongoDatabase db1;
     MongoCollection<org.bson.Document> collection1;
      MongoClient mongo2;
     MongoDatabase db2;
     MongoCollection<org.bson.Document> collection2;
    /**
     * Creates new form returntobase
     */
    public returntobase() {
        initComponents();
        getvalues();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        sn = new javax.swing.JTextField();
        wn1 = new javax.swing.JTextField();
        wn2 = new javax.swing.JTextField();
        wn = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(java.awt.Color.lightGray);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Return Soldires");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Map");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, -1, -1));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jRadioButton1.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton1.setText("Check point 1");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, -1, -1));

        jRadioButton2.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton2.setText("Check point 3");
        jPanel3.add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        jRadioButton3.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton3.setText("Check point 2");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jRadioButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, -1, -1));

        jRadioButton4.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton4.setText("Check point 5");
        jPanel3.add(jRadioButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 250, -1, -1));

        jRadioButton5.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton5.setText("Check point 8");
        jPanel3.add(jRadioButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 380, -1, -1));

        jRadioButton6.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton6.setText("Check point 4");
        jPanel3.add(jRadioButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 170, -1, -1));

        jRadioButton7.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton7.setText("Check point 6");
        jRadioButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton7ActionPerformed(evt);
            }
        });
        jPanel3.add(jRadioButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, -1, -1));

        jRadioButton8.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton8.setText("Check point 7");
        jPanel3.add(jRadioButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 330, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/militery/base/management/system/map (1).png"))); // NOI18N
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 370, 450));

        jButton4.setBackground(new java.awt.Color(0, 204, 0));
        jButton4.setFont(new java.awt.Font("Serif", 1, 17)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("View Details");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 150, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Number of soldiers ");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 220, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Number of weapons ");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 300, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Number of vehicles ");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 370, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Number of Tanks ");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 440, -1, -1));

        sn.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(sn, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 220, 100, -1));

        wn1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(wn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 300, 100, -1));

        wn2.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(wn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 370, 100, -1));

        wn.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(wn, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 440, 100, -1));

        jButton3.setBackground(new java.awt.Color(255, 0, 51));
        jButton3.setFont(new java.awt.Font("Serif", 1, 17)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 560, -1, -1));

        jButton1.setBackground(new java.awt.Color(51, 51, 255));
        jButton1.setFont(new java.awt.Font("Serif", 1, 15)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Return to Base");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 440, -1, -1));

        jButton2.setBackground(new java.awt.Color(51, 51, 255));
        jButton2.setFont(new java.awt.Font("Serif", 1, 15)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Return to Base");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 220, -1, -1));

        jButton5.setBackground(new java.awt.Color(51, 51, 255));
        jButton5.setFont(new java.awt.Font("Serif", 1, 15)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Return to Base");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 300, -1, -1));

        jButton6.setBackground(new java.awt.Color(51, 51, 255));
        jButton6.setFont(new java.awt.Font("Serif", 1, 15)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Return to Base");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 370, -1, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(195, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1026, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(179, 179, 179))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 800));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        /*  try {
            // Establish a connection to the MySQL database
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/main_base","root","root");

            // Prepare a SQL query to delete all data from the table (replace 'your_table_name' with your actual table name)
            String sql = "DELETE FROM solfier_queue";

            // Prepare the SQL statement
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                // Execute the query to delete all data
                preparedStatement.executeUpdate();

            }
            // Close resources
            connection.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting all data from the database", "Error", JOptionPane.ERROR_MESSAGE);
        }
        deleteweapon();
        addnewque();
        */
         mongo=new MongoClient("localhost",27017);
         db=mongo.getDatabase("SoldireManagement");
         collection=db.getCollection("CheckPoints");
         System.out.println("Collection created");
         
         if(jRadioButton1.isSelected()){
         Bson filter = Filters.eq("CheckPointName", "Check Point 1"); // Assuming _id is the field in MongoDB
Document result = collection.find(filter).first();

if (result != null) {
    // Data found, display or process the result
String fieldValue1 = result.getString("Soldiers"); // Replace "field1" with the actual field name in your document
    String fieldValue2 = result.getString("Weapons"); // Replace "field2" with the actual field name in your document
    String fieldValue3 = result.getString("Vehicles");
    String fieldValue4 = result.getString("Tanks");

    sn.setText(fieldValue1);
    wn1.setText(fieldValue2);
     wn2.setText(fieldValue3);
     wn.setText(fieldValue4);

    
} else {
    // Data not found
    System.out.println("Not found");
}
         }else if(jRadioButton3.isSelected()){
         Bson filter = Filters.eq("CheckPointName", "Check Point 2"); // Assuming _id is the field in MongoDB
Document result = collection.find(filter).first();

if (result != null) {
    // Data found, display or process the result
String fieldValue1 = result.getString("Soldiers"); // Replace "field1" with the actual field name in your document
    String fieldValue2 = result.getString("Weapons"); // Replace "field2" with the actual field name in your document
    String fieldValue3 = result.getString("Vehicles");
    String fieldValue4 = result.getString("Tanks");

    sn.setText(fieldValue1);
    wn1.setText(fieldValue2);
     wn2.setText(fieldValue3);
     wn.setText(fieldValue4);

    
} else {
    // Data not found
    System.out.println("Not found");
}
         }else if(jRadioButton2.isSelected()){
          Bson filter = Filters.eq("CheckPointName", "Check Point 3"); // Assuming _id is the field in MongoDB
Document result = collection.find(filter).first();

if (result != null) {
    // Data found, display or process the result
String fieldValue1 = result.getString("Soldiers"); // Replace "field1" with the actual field name in your document
    String fieldValue2 = result.getString("Weapons"); // Replace "field2" with the actual field name in your document
    String fieldValue3 = result.getString("Vehicles");
    String fieldValue4 = result.getString("Tanks");

    sn.setText(fieldValue1);
    wn1.setText(fieldValue2);
     wn2.setText(fieldValue3);
     wn.setText(fieldValue4);

    
} else {
    // Data not found
    System.out.println("Not found");
}
         }else if(jRadioButton6.isSelected()){
         Bson filter = Filters.eq("CheckPointName", "Check Point 4"); // Assuming _id is the field in MongoDB
Document result = collection.find(filter).first();

if (result != null) {
    // Data found, display or process the result
String fieldValue1 = result.getString("Soldiers"); // Replace "field1" with the actual field name in your document
    String fieldValue2 = result.getString("Weapons"); // Replace "field2" with the actual field name in your document
    String fieldValue3 = result.getString("Vehicles");
    String fieldValue4 = result.getString("Tanks");

    sn.setText(fieldValue1);
    wn1.setText(fieldValue2);
     wn2.setText(fieldValue3);
     wn.setText(fieldValue4);

    
} else {
    // Data not found
    System.out.println("Not found");
}
         }else if(jRadioButton4.isSelected()){
          Bson filter = Filters.eq("CheckPointName", "Check Point 5"); // Assuming _id is the field in MongoDB
Document result = collection.find(filter).first();

if (result != null) {
    // Data found, display or process the result
String fieldValue1 = result.getString("Soldiers"); // Replace "field1" with the actual field name in your document
    String fieldValue2 = result.getString("Weapons"); // Replace "field2" with the actual field name in your document
    String fieldValue3 = result.getString("Vehicles");
    String fieldValue4 = result.getString("Tanks");

    sn.setText(fieldValue1);
    wn1.setText(fieldValue2);
     wn2.setText(fieldValue3);
     wn.setText(fieldValue4);

    
} else {
    // Data not found
    System.out.println("Not found");
}
         }else if(jRadioButton7.isSelected()){
          Bson filter = Filters.eq("CheckPointName", "Check Point 6"); // Assuming _id is the field in MongoDB
Document result = collection.find(filter).first();

if (result != null) {
    // Data found, display or process the result
String fieldValue1 = result.getString("Soldiers"); // Replace "field1" with the actual field name in your document
    String fieldValue2 = result.getString("Weapons"); // Replace "field2" with the actual field name in your document
    String fieldValue3 = result.getString("Vehicles");
    String fieldValue4 = result.getString("Tanks");

    sn.setText(fieldValue1);
    wn1.setText(fieldValue2);
     wn2.setText(fieldValue3);
     wn.setText(fieldValue4);

    
} else {
    // Data not found
    System.out.println("Not found");
}
         }else if (jRadioButton8.isSelected()){
           Bson filter = Filters.eq("CheckPointName", "Check Point 7"); // Assuming _id is the field in MongoDB
Document result = collection.find(filter).first();

if (result != null) {
    // Data found, display or process the result
String fieldValue1 = result.getString("Soldiers"); // Replace "field1" with the actual field name in your document
    String fieldValue2 = result.getString("Weapons"); // Replace "field2" with the actual field name in your document
    String fieldValue3 = result.getString("Vehicles");
    String fieldValue4 = result.getString("Tanks");

    sn.setText(fieldValue1);
    wn1.setText(fieldValue2);
     wn2.setText(fieldValue3);
     wn.setText(fieldValue4);

    
} else {
    // Data not found
    System.out.println("Not found");
}
         }else if(jRadioButton5.isSelected()){
           Bson filter = Filters.eq("CheckPointName", "Check Point 8"); // Assuming _id is the field in MongoDB
Document result = collection.find(filter).first();

if (result != null) {
    // Data found, display or process the result
String fieldValue1 = result.getString("Soldiers"); // Replace "field1" with the actual field name in your document
    String fieldValue2 = result.getString("Weapons"); // Replace "field2" with the actual field name in your document
    String fieldValue3 = result.getString("Vehicles");
    String fieldValue4 = result.getString("Tanks");

    sn.setText(fieldValue1);
    wn1.setText(fieldValue2);
     wn2.setText(fieldValue3);
     wn.setText(fieldValue4);

    
} else {
    // Data not found
    System.out.println("Not found");
}
         }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        home menu=new home();
        menu.show();
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        setzerosoldier();

         mongo=new MongoClient("localhost",27017);
         db=mongo.getDatabase("SoldireManagement");
         collection=db.getCollection("CurrentData");
         System.out.println("Collection created");
                 
        try {
    String number = sn.getText();
     int number1 = Integer.parseInt(number);
     soldire  = soldire + number1 ;
      soldires = String.valueOf(soldire);
    
    Bson filter = Filters.eq("ID", "1");
    

    Document updateDoc = new Document("$set", new Document("SoldierCount", soldires));
    

    UpdateResult updateResult = collection.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
                setzeroweapon();

                mongo=new MongoClient("localhost",27017);
         db=mongo.getDatabase("SoldireManagement");
         collection=db.getCollection("CurrentData");
         System.out.println("Collection created");
                 
        try {
    String number = wn1.getText();
     int number1 = Integer.parseInt(number);
     weapons  = weapons + number1 ;
      weaponss = String.valueOf(weapons);
    
    Bson filter = Filters.eq("ID", "1");
    

    Document updateDoc = new Document("$set", new Document("WeaponCount", weaponss));
    

    UpdateResult updateResult = collection.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
                setzerovehicle();

         mongo=new MongoClient("localhost",27017);
         db=mongo.getDatabase("SoldireManagement");
         collection=db.getCollection("CurrentData");
         System.out.println("Collection created");
                 
        try {
    String number = wn2.getText();
     int number1 = Integer.parseInt(number);
     vehicles  = vehicles + number1 ;
      vehicless = String.valueOf(vehicles);
    
    Bson filter = Filters.eq("ID", "1");
    

    Document updateDoc = new Document("$set", new Document("VehicleCount", vehicless));
    

    UpdateResult updateResult = collection.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                setzerotank();
           mongo=new MongoClient("localhost",27017);
         db=mongo.getDatabase("SoldireManagement");
         collection=db.getCollection("CurrentData");
         System.out.println("Collection created");
                 
        try {
    String number = wn.getText();
     int number1 = Integer.parseInt(number);
     tanks  = tanks + number1 ;
      tankss = String.valueOf(tanks);
    
    Bson filter = Filters.eq("ID", "1");
    

    Document updateDoc = new Document("$set", new Document("TanksCount", tankss));
    

    UpdateResult updateResult = collection.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(returntobase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(returntobase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(returntobase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(returntobase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new returntobase().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JTextField sn;
    private javax.swing.JTextField wn;
    private javax.swing.JTextField wn1;
    private javax.swing.JTextField wn2;
    // End of variables declaration//GEN-END:variables

    private void getvalues() {
           mongo1=new MongoClient("localhost",27017);
         db1=mongo1.getDatabase("SoldireManagement");
         collection1=db1.getCollection("CurrentData");
         System.out.println("Collection created");
         
Bson filter = Filters.eq("ID", "1"); // Assuming _id is the field in MongoDB
Document result = collection1.find(filter).first();

if (result != null) {
    // Data found, display or process the result
     soldires = result.getString("SoldierCount"); // Replace "field1" with the actual field name in your document
     weaponss = result.getString("WeaponCount"); // Replace "field2" with the actual field name in your document
     tankss = result.getString("TanksCount");
     vehicless = result.getString("VehicleCount");

      soldire = Integer.parseInt(soldires);
          weapons = Integer.parseInt(weaponss);
              tanks = Integer.parseInt(tankss);
                  vehicles = Integer.parseInt(vehicless);

    
} else {
    // Data not found
    System.out.println("Not found");
}
    }

    private void setzerosoldier() {
         mongo2=new MongoClient("localhost",27017);
         db2=mongo2.getDatabase("SoldireManagement");
         collection2=db2.getCollection("CheckPoints");
         System.out.println("Collection created");
         
        if(jRadioButton1.isSelected()){
        
                 
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 1");
    

    Document updateDoc = new Document("$set", new Document("Soldiers", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton3.isSelected()){
                try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 2");
    

    Document updateDoc = new Document("$set", new Document("Soldiers", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        
        }else if(jRadioButton2.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 3");
    

    Document updateDoc = new Document("$set", new Document("Soldiers", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton6.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 4");
    

    Document updateDoc = new Document("$set", new Document("Soldiers", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton4.isSelected()){
         try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 5");
    

    Document updateDoc = new Document("$set", new Document("Soldiers", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton7.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 6");
    

    Document updateDoc = new Document("$set", new Document("Soldiers", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton8.isSelected()){
          try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 7");
    

    Document updateDoc = new Document("$set", new Document("Soldiers", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton5.isSelected()){
         try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 8");
    

    Document updateDoc = new Document("$set", new Document("Soldiers", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }
    }

    private void setzeroweapon() {
 mongo2=new MongoClient("localhost",27017);
         db2=mongo2.getDatabase("SoldireManagement");
         collection2=db2.getCollection("CheckPoints");
         System.out.println("Collection created");
         
        if(jRadioButton1.isSelected()){
        
                 
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 1");
    

    Document updateDoc = new Document("$set", new Document("Weapons", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton3.isSelected()){
                try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 2");
    

    Document updateDoc = new Document("$set", new Document("Weapons", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        
        }else if(jRadioButton2.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 3");
    

    Document updateDoc = new Document("$set", new Document("Weapons", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton6.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 4");
    

    Document updateDoc = new Document("$set", new Document("Weapons", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton4.isSelected()){
         try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 5");
    

    Document updateDoc = new Document("$set", new Document("Weapons", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton7.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 6");
    

    Document updateDoc = new Document("$set", new Document("Weapons", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton8.isSelected()){
          try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 7");
    

    Document updateDoc = new Document("$set", new Document("Weapons", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton5.isSelected()){
         try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 8");
    

    Document updateDoc = new Document("$set", new Document("Weapons", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }    }

    private void setzerovehicle() {
 mongo2=new MongoClient("localhost",27017);
         db2=mongo2.getDatabase("SoldireManagement");
         collection2=db2.getCollection("CheckPoints");
         System.out.println("Collection created");
         
        if(jRadioButton1.isSelected()){
        
                 
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 1");
    

    Document updateDoc = new Document("$set", new Document("Vehicles", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton3.isSelected()){
                try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 2");
    

    Document updateDoc = new Document("$set", new Document("Vehicles", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        
        }else if(jRadioButton2.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 3");
    

    Document updateDoc = new Document("$set", new Document("Vehicles", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton6.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 4");
    

    Document updateDoc = new Document("$set", new Document("Vehicles", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton4.isSelected()){
         try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 5");
    

    Document updateDoc = new Document("$set", new Document("Vehicles", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton7.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 6");
    

    Document updateDoc = new Document("$set", new Document("Vehicles", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton8.isSelected()){
          try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 7");
    

    Document updateDoc = new Document("$set", new Document("Vehicles", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton5.isSelected()){
         try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 8");
    

    Document updateDoc = new Document("$set", new Document("Vehicles", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }     }

    private void setzerotank() {
         mongo2=new MongoClient("localhost",27017);
         db2=mongo2.getDatabase("SoldireManagement");
         collection2=db2.getCollection("CheckPoints");
         System.out.println("Collection created");
         
        if(jRadioButton1.isSelected()){
        
                 
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 1");
    

    Document updateDoc = new Document("$set", new Document("Tanks", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton3.isSelected()){
                try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 2");
    

    Document updateDoc = new Document("$set", new Document("Tanks", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        
        }else if(jRadioButton2.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 3");
    

    Document updateDoc = new Document("$set", new Document("Tanks", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton6.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 4");
    

    Document updateDoc = new Document("$set", new Document("Tanks", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton4.isSelected()){
         try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 5");
    

    Document updateDoc = new Document("$set", new Document("Tanks", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton7.isSelected()){
        try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 6");
    

    Document updateDoc = new Document("$set", new Document("Tanks", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton8.isSelected()){
          try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 7");
    

    Document updateDoc = new Document("$set", new Document("Tanks", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }else if(jRadioButton5.isSelected()){
         try {
    
    Bson filter = Filters.eq("CheckPointName", "Check Point 8");
    

    Document updateDoc = new Document("$set", new Document("Tanks", "0"));
    

    UpdateResult updateResult = collection2.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
        }       }
}
