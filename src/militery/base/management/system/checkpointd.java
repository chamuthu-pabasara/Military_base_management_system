/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package militery.base.management.system;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.result.UpdateResult;
import javax.swing.JOptionPane;
import org.bson.Document;
import org.bson.conversions.Bson;

/**
 *
 * @author M S I
 */
public class checkpointd extends javax.swing.JFrame {
        int soldire;
    int tanks;
    int vehicles;
    int weapons;
        String soldires;
        String tankss;
        String vehicless;
        String weaponss;
     MongoClient mongo;
     MongoDatabase db;
     MongoCollection<org.bson.Document> collection;
          MongoClient mongo1;
     MongoDatabase db1;
     MongoCollection<org.bson.Document> collection1;
    /**
     * Creates new form checkpointd
     */
    public checkpointd() {
        initComponents();
        getvalues();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        wn = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        sn = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        combo = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        wn1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        wn2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(java.awt.Color.lightGray);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Check Point Deployment");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 270, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Number of soldiers required");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, -1, -1));

        wn.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(wn, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 460, 100, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Number of Tanks required");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 460, -1, -1));

        sn.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(sn, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 240, 100, -1));

        jButton3.setBackground(new java.awt.Color(255, 0, 51));
        jButton3.setFont(new java.awt.Font("Serif", 1, 17)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 610, -1, -1));

        combo.setFont(new java.awt.Font("Segoe UI Emoji", 1, 17)); // NOI18N
        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Check Point", "Check Point 1", "Check Point 2", "Check Point 3", "Check Point 4", "Check Point 5", "Check Point 6", "Check Point 7", "Check Point 8", " " }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });
        jPanel2.add(combo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, -1, -1));

        jButton4.setBackground(new java.awt.Color(0, 204, 0));
        jButton4.setFont(new java.awt.Font("Serif", 1, 17)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Deployed");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 610, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Number of weapons required");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, -1, -1));

        wn1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(wn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 320, 100, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Number of vehicles required");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, -1, -1));

        wn2.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jPanel2.add(wn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 390, 100, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(450, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(422, 422, 422))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 800));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        home menu=new home();
        menu.show();
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
      /*  try {
            // Establish a connection to the MySQL database
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/main_base","root","root");

            // Prepare a SQL query to delete all data from the table (replace 'your_table_name' with your actual table name)
            String sql = "DELETE FROM solfier_queue";

            // Prepare the SQL statement
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                // Execute the query to delete all data
                preparedStatement.executeUpdate();

            }
            // Close resources
            connection.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting all data from the database", "Error", JOptionPane.ERROR_MESSAGE);
        }
        deleteweapon();
        addnewque();
        */
      decrece();
       mongo=new MongoClient("localhost",27017);
         db=mongo.getDatabase("SoldireManagement");
         collection=db.getCollection("CheckPoints");
         System.out.println("Collection created");
                 
        try {
    String idToUpdate = (String) combo.getSelectedItem();
    Bson filter = Filters.eq("CheckPointName", idToUpdate);
    

    Document updateDoc = new Document("$set", new Document("Soldiers", sn.getText())
            .append("Weapons", wn1.getText())
            .append("Vehicles", wn2.getText())
                .append("Tanks", wn.getText()));
    

    UpdateResult updateResult = collection.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
    }//GEN-LAST:event_jButton4ActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(checkpointd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(checkpointd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(checkpointd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(checkpointd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new checkpointd().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField sn;
    private javax.swing.JTextField wn;
    private javax.swing.JTextField wn1;
    private javax.swing.JTextField wn2;
    // End of variables declaration//GEN-END:variables

    private void decrece() {
 mongo1=new MongoClient("localhost",27017);
         db1=mongo1.getDatabase("SoldireManagement");
         collection1=db1.getCollection("CurrentData");
         System.out.println("Collection created");  
         String numbera = sn.getText();
     int number1 = Integer.parseInt(numbera);
     soldire  = soldire - number1 ;
      soldires = String.valueOf(soldire);
      
          String numberb = wn1.getText();
     int number2 = Integer.parseInt(numberb);
     weapons  = weapons - number1 ;
      weaponss = String.valueOf(weapons);
      
          String numberc = wn2.getText();
     int number3 = Integer.parseInt(numberc);
     vehicles  = vehicles - number1 ;
      vehicless = String.valueOf(vehicles);
      
          String numberd = wn.getText();
     int number4 = Integer.parseInt(numberd);
     tanks  = tanks - number1 ;
      tankss = String.valueOf(tanks);
    
            try {
    Bson filter = Filters.eq("ID", "1");
    

    Document updateDoc = new Document("$set", new Document("SoldierCount", soldires)
            .append("WeaponCount", weaponss)
            .append("TanksCount", tankss)
                .append("VehicleCount", vehicless));
    

    UpdateResult updateResult = collection1.updateOne(filter, updateDoc);

    if (updateResult.getModifiedCount() > 0) {
        // Data updated successfully
        JOptionPane.showMessageDialog(this, "Data updated successfully!");
        
    } else {
        // No matching document found
        JOptionPane.showMessageDialog(this, "No matching document found for the given ID.");
    }

} catch (Exception e) {
    System.err.println("Error connecting to MongoDB or updating data: " + e.getMessage());
} 
   
    
    
    
    }

    private void getvalues() {
           mongo1=new MongoClient("localhost",27017);
         db1=mongo1.getDatabase("SoldireManagement");
         collection1=db1.getCollection("CurrentData");
         System.out.println("Collection created");
         
Bson filter = Filters.eq("ID", "1"); // Assuming _id is the field in MongoDB
Document result = collection1.find(filter).first();

if (result != null) {
    // Data found, display or process the result
     soldires = result.getString("SoldierCount"); // Replace "field1" with the actual field name in your document
     weaponss = result.getString("WeaponCount"); // Replace "field2" with the actual field name in your document
     tankss = result.getString("TanksCount");
     vehicless = result.getString("VehicleCount");

      soldire = Integer.parseInt(soldires);
      weapons = Integer.parseInt(weaponss);
      tanks = Integer.parseInt(tankss);
      vehicles = Integer.parseInt(vehicless);

    
} else {
    // Data not found
    System.out.println("Not found");
}    }
}
